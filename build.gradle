plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.ajoberstar.grgit' version '3.0.0'
}
ext {
    // Supplied by Jenkins
    buildNumber = System.env.BUILD_NUMBER == null ? "x" : "$System.env.BUILD_NUMBER"
    mavenDirectory = System.env.MAVEN_DIR == null ? "$projectDir/repo" : "$System.env.MAVEN_DIR"
    jdDirectory = System.env.JAVADOCS_DIR == null ? null : "$System.env.JAVADOCS_DIR"
}

group = "cat.nyaa"
archivesBaseName = "${PLUGIN_NAME}-mc${MINECRAFT_VERSION}"
version = "${MAJOR_VERSION}.${MINOR_VERSION}.$ext.buildNumber" as String

sourceCompatibility = 16
targetCompatibility = 16

repositories {
    mavenCentral()
    maven { name 'Spigot'; url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name 'Sonatype'; url 'https://oss.sonatype.org/content/groups/public' }
    maven { name 'sk89q'; url 'https://maven.sk89q.com/artifactory/repo/' }
    maven { name 'vault-repo'; url 'https://jitpack.io' }
    maven { name 'NyaaCat'; url 'https://ci.nyaacat.com/maven/' }
    maven { name 'EssentialsX'; url 'https://ci.ender.zone/plugin/repository/everything' }
    maven { name 'aikar'; url 'https://repo.aikar.co/content/groups/aikar/' }
    maven { name 'PlaceholderAPI'; url 'https://repo.extendedclip.com/content/repositories/placeholderapi/' }
}

shadowJar {
    configurations = [project.configurations.shadow]
}

dependencies {
    //compileOnly files(spigotNmsPath)
    compileOnly "org.spigotmc:spigot-api:$MINECRAFT_VERSION-R0.1-SNAPSHOT"

    // other nyaa plugins
    if (gradle.hasProperty("useLocalDependencies") && gradle.useLocalDependencies) {
        compileOnly project(":NyaaCore")
    } else {
        compileOnly('cat.nyaa:nyaacore:8.1-SNAPSHOT') { transitive = false }
    }
    //3rd

    //compileOnly group: "com.comphenix.protocol", name: "ProtocolLib", version: "4.7.0"
    compileOnly 'org.jetbrains:annotations:22.0.0'

    compileOnly 'io.netty:netty-all:4.1.70.Final' // netty is shadowed inside spigot jar
    compileOnly 'org.ow2.asm:asm:9.2'

    compileOnly 'net.bytebuddy:byte-buddy:1.12.1'
    shadow 'net.bytebuddy:byte-buddy:1.12.1'


    compileOnly 'com.udojava:EvalEx:2.6'

    implementation('com.sk89q.worldguard:worldguard-core:7.0.1-SNAPSHOT')
    implementation('com.sk89q.worldguard:worldguard-bukkit:7.0.1-SNAPSHOT') {
        exclude group: 'io.papermc', module: 'paperlib'
        exclude group: 'org.bstats', module: 'bstats-bukkit'
        exclude group: 'org.bukkit', module: 'bukkit'
    }

    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation('net.milkbowl.vault:VaultAPI:1.7') {
        transitive = false
    }

    //test
    testImplementation(platform('org.junit:junit-bom:5.7.2'))
    testImplementation('org.junit.jupiter:junit-jupiter:5.8.1')

}

processResources {
    def props = [
            version   : version,
            pluginName: PLUGIN_NAME
    ]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.srcDirs
}

// javadoc generation options
javadoc {
    // javadoc output folder
    if (project.jdDirectory != null) destinationDir = file("${jdDirectory}/${PLUGIN_NAME.toLowerCase()}-${version}")

    (options as StandardJavadocDocletOptions).with {
        links 'https://docs.oracle.com/en/java/javase/16/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://guava.dev/releases/21.0/api/docs/'
        links 'https://ci.nyaacat.com/javadocs/nyaacore-7.1.350/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'
        links 'https://netty.io/4.1/api/'

        options.locale 'en_US'
        options.encoding 'UTF-8'
        options.docEncoding 'UTF-8'
        options.addBooleanOption('keywords', true)
        options.addStringOption('Xdoclint:none', '-quiet')
        if (JavaVersion.current() > JavaVersion.VERSION_1_9) {
            options.addBooleanOption('html5', true)
        }


        windowTitle = "${PLUGIN_NAME} Javadoc"
        docTitle = "${PLUGIN_NAME} (mc$MINECRAFT_VERSION-${project.version})"
    }
}

jar {
    archiveClassifier.set('core')
    dependsOn shadowJar
}

shadowJar {
    archiveClassifier.set('release')
    // relocate 'net.sf.cglib', 'cat.nyaa.cglib'
    configurations = [project.configurations.shadow]
}

task apiJar(type: Jar) {
    includeEmptyDirs = false
    from sourceSets.main.output.classesDirs
    include('**/think/rpgitems/RPGItems.class')
    include('**/think/rpgitems/Events.class')
    include('**/think/rpgitems/api/')
    include('**/think/rpgitems/item/')
    include('**/think/rpgitems/power/')
    include('**/think/rpgitems/event/')
    include('**/think/rpgitems/utils/')
    exclude('**/think/rpgitems/power/impl/')
}

// javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

// extra compile warnings
compileJava {
    // options.compilerArgs += ["-Xlint:deprecation"]
    options.encoding = 'UTF-8'
}

// maven publish
publishing {
    publications {
        mavenJava(MavenPublication) {
            group project.group
            artifactId PLUGIN_NAME.toLowerCase()
            version "$MAJOR_VERSION.$MINOR_VERSION-SNAPSHOT"

            from components.java

            artifact sourcesJar
            artifact javadocJar
            artifact apiJar
        }
    }
    repositories {
        maven {
            url mavenDirectory
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"

    }
}